# Makefile.in generated by automake 1.14.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





VPATH = ../../src
am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/shout
pkgincludedir = $(includedir)/shout
pkglibdir = $(libdir)/shout
pkglibexecdir = $(libexecdir)/shout
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = shout$(EXEEXT) shout_adapt_am$(EXEEXT) \
	shout_avgEnergy$(EXEEXT) shout_cluster$(EXEEXT) \
	shout_dct2lextree$(EXEEXT) shout_lm2bin$(EXEEXT) \
	shout_maketrainset$(EXEEXT) shout_merge_am$(EXEEXT) \
	shout_merge_trainset$(EXEEXT) shout_normalize_am$(EXEEXT) \
	shout_online$(EXEEXT) shout_prepare_adapt$(EXEEXT) \
	shout_preprocess$(EXEEXT) shout_segment$(EXEEXT) \
	shout_spkrec$(EXEEXT) shout_spkrec_stats$(EXEEXT) \
	shout_train_finish$(EXEEXT) shout_train_finish_sat$(EXEEXT) \
	shout_train_mmi$(EXEEXT) shout_train_model$(EXEEXT) \
	shout_update_version$(EXEEXT) shout_vtln$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/Makefile.am \
	$(top_srcdir)/mkinstalldirs $(top_srcdir)/depcomp \
	$(noinst_HEADERS)
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)"
LIBRARIES = $(lib_LIBRARIES)
AR = ar
ARFLAGS = cru
AM_V_AR = $(am__v_AR_$(V))
am__v_AR_ = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))
am__v_AR_0 = @echo "  AR      " $@;
am__v_AR_1 = 
libshout_basics_a_AR = $(AR) $(ARFLAGS)
libshout_basics_a_LIBADD =
am_libshout_basics_a_OBJECTS = gaussian.$(OBJEXT) \
	languagemodel.$(OBJEXT) lexicaltree.$(OBJEXT) \
	mixgaussian.$(OBJEXT) phonemodel.$(OBJEXT) vector.$(OBJEXT) \
	hash.$(OBJEXT) phonefilereader.$(OBJEXT) featurepool.$(OBJEXT) \
	featureextraction.$(OBJEXT) FFTReal.$(OBJEXT) \
	multimixgaussian.$(OBJEXT) shout_misc.$(OBJEXT) \
	shoutconfig.$(OBJEXT) stringlookup.$(OBJEXT) \
	trainphonemodel.$(OBJEXT)
libshout_basics_a_OBJECTS = $(am_libshout_basics_a_OBJECTS)
PROGRAMS = $(bin_PROGRAMS)
am_shout_OBJECTS = whisper.$(OBJEXT) shout_maketrainset.$(OBJEXT) \
	adapt_am_treenode.$(OBJEXT) segmenter.$(OBJEXT) \
	articulatorystream.$(OBJEXT)
shout_OBJECTS = $(am_shout_OBJECTS)
shout_DEPENDENCIES = $(top_builddir)/src/libshout_basics.a
shout_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(shout_LDFLAGS) \
	$(LDFLAGS) -o $@
am_shout_adapt_am_OBJECTS = adapt_am.$(OBJEXT) adapt_am_main.$(OBJEXT) \
	adapt_am_treenode.$(OBJEXT) languagemodel_segmenter.$(OBJEXT) \
	segmenter.$(OBJEXT) train_segmenter.$(OBJEXT)
shout_adapt_am_OBJECTS = $(am_shout_adapt_am_OBJECTS)
shout_adapt_am_DEPENDENCIES = $(top_builddir)/src/libshout_basics.a
shout_adapt_am_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(shout_adapt_am_LDFLAGS) $(LDFLAGS) -o $@
am_shout_avgEnergy_OBJECTS = avgenergy.$(OBJEXT)
shout_avgEnergy_OBJECTS = $(am_shout_avgEnergy_OBJECTS)
shout_avgEnergy_DEPENDENCIES = $(top_builddir)/src/libshout_basics.a
am_shout_cluster_OBJECTS = shout_cluster.$(OBJEXT) \
	adapt_am_treenode.$(OBJEXT) adapt_segmenter.$(OBJEXT) \
	segmenter.$(OBJEXT) train_segmenter.$(OBJEXT) \
	languagemodel_segmenter.$(OBJEXT)
shout_cluster_OBJECTS = $(am_shout_cluster_OBJECTS)
shout_cluster_DEPENDENCIES = $(top_builddir)/src/libshout_basics.a
shout_cluster_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(shout_cluster_LDFLAGS) $(LDFLAGS) -o $@
am_shout_dct2lextree_OBJECTS = shout_dct2lextree.$(OBJEXT) \
	shout_maketrainset.$(OBJEXT)
shout_dct2lextree_OBJECTS = $(am_shout_dct2lextree_OBJECTS)
shout_dct2lextree_DEPENDENCIES =  \
	$(top_builddir)/src/libshout_basics.a
shout_dct2lextree_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(shout_dct2lextree_LDFLAGS) $(LDFLAGS) -o $@
am_shout_lm2bin_OBJECTS = memmappedfile.$(OBJEXT) \
	shout_lm2bin.$(OBJEXT) shout_maketrainset.$(OBJEXT) \
	trainhash.$(OBJEXT)
shout_lm2bin_OBJECTS = $(am_shout_lm2bin_OBJECTS)
shout_lm2bin_DEPENDENCIES = $(top_builddir)/src/libshout_basics.a
shout_lm2bin_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(shout_lm2bin_LDFLAGS) $(LDFLAGS) -o $@
am_shout_maketrainset_OBJECTS = shout_maketrainset.$(OBJEXT) \
	shout_maketrainset_main.$(OBJEXT)
shout_maketrainset_OBJECTS = $(am_shout_maketrainset_OBJECTS)
shout_maketrainset_DEPENDENCIES =  \
	$(top_builddir)/src/libshout_basics.a
shout_maketrainset_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(shout_maketrainset_LDFLAGS) $(LDFLAGS) -o $@
am_shout_merge_am_OBJECTS = shoutmergeam.$(OBJEXT)
shout_merge_am_OBJECTS = $(am_shout_merge_am_OBJECTS)
shout_merge_am_DEPENDENCIES = $(top_builddir)/src/libshout_basics.a
am_shout_merge_trainset_OBJECTS = mergetrainset.$(OBJEXT) \
	shout_maketrainset.$(OBJEXT)
shout_merge_trainset_OBJECTS = $(am_shout_merge_trainset_OBJECTS)
shout_merge_trainset_DEPENDENCIES =  \
	$(top_builddir)/src/libshout_basics.a
am_shout_normalize_am_OBJECTS = normalizeam.$(OBJEXT)
shout_normalize_am_OBJECTS = $(am_shout_normalize_am_OBJECTS)
shout_normalize_am_DEPENDENCIES =  \
	$(top_builddir)/src/libshout_basics.a
am_shout_online_OBJECTS = shout_vtln.$(OBJEXT) shoutonline.$(OBJEXT)
shout_online_OBJECTS = $(am_shout_online_OBJECTS)
shout_online_DEPENDENCIES = $(top_builddir)/src/libshout_basics.a
am_shout_prepare_adapt_OBJECTS = adapt_am_treenode.$(OBJEXT) \
	shoutprepareadapt.$(OBJEXT)
shout_prepare_adapt_OBJECTS = $(am_shout_prepare_adapt_OBJECTS)
shout_prepare_adapt_DEPENDENCIES =  \
	$(top_builddir)/src/libshout_basics.a
shout_prepare_adapt_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(shout_prepare_adapt_LDFLAGS) $(LDFLAGS) -o $@
am_shout_preprocess_OBJECTS = shout_preprocess.$(OBJEXT)
shout_preprocess_OBJECTS = $(am_shout_preprocess_OBJECTS)
shout_preprocess_DEPENDENCIES = $(top_builddir)/src/libshout_basics.a
am_shout_segment_OBJECTS = shoutsegment.$(OBJEXT) segmenter.$(OBJEXT)
shout_segment_OBJECTS = $(am_shout_segment_OBJECTS)
shout_segment_DEPENDENCIES = $(top_builddir)/src/libshout_basics.a
am_shout_spkrec_OBJECTS = speakerrecognition.$(OBJEXT)
shout_spkrec_OBJECTS = $(am_shout_spkrec_OBJECTS)
shout_spkrec_DEPENDENCIES = $(top_builddir)/src/libshout_basics.a
am_shout_spkrec_stats_OBJECTS = spkrecstats.$(OBJEXT)
shout_spkrec_stats_OBJECTS = $(am_shout_spkrec_stats_OBJECTS)
shout_spkrec_stats_DEPENDENCIES =  \
	$(top_builddir)/src/libshout_basics.a
am_shout_train_finish_OBJECTS = shouttrainfinish.$(OBJEXT)
shout_train_finish_OBJECTS = $(am_shout_train_finish_OBJECTS)
shout_train_finish_DEPENDENCIES =  \
	$(top_builddir)/src/libshout_basics.a
am_shout_train_finish_sat_OBJECTS = shouttrainfinishsat.$(OBJEXT)
shout_train_finish_sat_OBJECTS = $(am_shout_train_finish_sat_OBJECTS)
shout_train_finish_sat_DEPENDENCIES =  \
	$(top_builddir)/src/libshout_basics.a
am_shout_train_mmi_OBJECTS = shouttrainmmi.$(OBJEXT)
shout_train_mmi_OBJECTS = $(am_shout_train_mmi_OBJECTS)
shout_train_mmi_DEPENDENCIES = $(top_builddir)/src/libshout_basics.a
am_shout_train_model_OBJECTS = shouttrainmodel.$(OBJEXT)
shout_train_model_OBJECTS = $(am_shout_train_model_OBJECTS)
shout_train_model_DEPENDENCIES =  \
	$(top_builddir)/src/libshout_basics.a
am_shout_update_version_OBJECTS = shout_updateversion.$(OBJEXT)
shout_update_version_OBJECTS = $(am_shout_update_version_OBJECTS)
shout_update_version_DEPENDENCIES =  \
	$(top_builddir)/src/libshout_basics.a
am_shout_vtln_OBJECTS = shout_vtln.$(OBJEXT) shout_vtln_main.$(OBJEXT)
shout_vtln_OBJECTS = $(am_shout_vtln_OBJECTS)
shout_vtln_DEPENDENCIES = $(top_builddir)/src/libshout_basics.a
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(libshout_basics_a_SOURCES) $(shout_SOURCES) \
	$(shout_adapt_am_SOURCES) $(shout_avgEnergy_SOURCES) \
	$(shout_cluster_SOURCES) $(shout_dct2lextree_SOURCES) \
	$(shout_lm2bin_SOURCES) $(shout_maketrainset_SOURCES) \
	$(shout_merge_am_SOURCES) $(shout_merge_trainset_SOURCES) \
	$(shout_normalize_am_SOURCES) $(shout_online_SOURCES) \
	$(shout_prepare_adapt_SOURCES) $(shout_preprocess_SOURCES) \
	$(shout_segment_SOURCES) $(shout_spkrec_SOURCES) \
	$(shout_spkrec_stats_SOURCES) $(shout_train_finish_SOURCES) \
	$(shout_train_finish_sat_SOURCES) $(shout_train_mmi_SOURCES) \
	$(shout_train_model_SOURCES) $(shout_update_version_SOURCES) \
	$(shout_vtln_SOURCES)
DIST_SOURCES = $(libshout_basics_a_SOURCES) $(shout_SOURCES) \
	$(shout_adapt_am_SOURCES) $(shout_avgEnergy_SOURCES) \
	$(shout_cluster_SOURCES) $(shout_dct2lextree_SOURCES) \
	$(shout_lm2bin_SOURCES) $(shout_maketrainset_SOURCES) \
	$(shout_merge_am_SOURCES) $(shout_merge_trainset_SOURCES) \
	$(shout_normalize_am_SOURCES) $(shout_online_SOURCES) \
	$(shout_prepare_adapt_SOURCES) $(shout_preprocess_SOURCES) \
	$(shout_segment_SOURCES) $(shout_spkrec_SOURCES) \
	$(shout_spkrec_stats_SOURCES) $(shout_train_finish_SOURCES) \
	$(shout_train_finish_sat_SOURCES) $(shout_train_mmi_SOURCES) \
	$(shout_train_model_SOURCES) $(shout_update_version_SOURCES) \
	$(shout_vtln_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
HEADERS = $(noinst_HEADERS)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = aclocal-1.14
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AUTOCONF = autoconf
AUTOHEADER = autoheader
AUTOMAKE = automake-1.14
AWK = awk
CPPFLAGS = 
CXX = /usr/local/bin/g++-4.8
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -O3 -funroll-loops -mfpmath=sse -msse -msse2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = \c
ECHO_N = 
ECHO_T = 
EXEEXT = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = -lpthread
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = makeinfo
MKDIR_P = ../../install-sh -c -d
OBJEXT = o
PACKAGE = shout
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_URL = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 0.2
abs_builddir = /Users/skander/dev/shout/code/release/src
abs_srcdir = /Users/skander/dev/shout/code/release/../src
abs_top_builddir = /Users/skander/dev/shout/code/release
abs_top_srcdir = /Users/skander/dev/shout/code/release/..
ac_ct_CXX = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /Users/skander/dev/shout/code/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = ../../src
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ../..
INCLUDES = $(all_includes)

# these are the headers for your project
noinst_HEADERS = adapt_am.h adapt_am_treenode.h articulatorystream.h \
	featureextraction.h featurepool.h io_speaker_segmenter.h memmappedfile.h mergetrainset.h \
	multimixgaussian.h nbest.h normalizeam.h phonefilereader.h shout_cluster.h \
	shout_dct2lextree.h shout_lm2bin.h shout_maketrainset.h shout_updateversion.h shout_vtln.h \
	shoutconfig.h shoutmergeam.h shoutonline.h shoutprepareadapt.h shouttrainfinish.h \
	shouttrainfinishsat.h shouttrainmmi.h shouttrainmodel.h speakerrecognition.h stringlookup.h \
	train_segmenter.h trainphonemodel.h whisper.h


# the application source, library search path, and link libraries
shout_dct2lextree_LDFLAGS = $(all_libraries)
shout_dct2lextree_SOURCES = socket_standard.h standard.h shout_dct2lextree.cpp shout_maketrainset.cpp shout_maketrainset.h
shout_lm2bin_LDFLAGS = $(all_libraries)
shout_lm2bin_SOURCES = memmappedfile.cpp shout_lm2bin.cpp \
	shout_maketrainset.cpp shout_maketrainset.h standard.h trainhash.cpp trainhash.h

shout_maketrainset_LDFLAGS = $(all_libraries) -pg
shout_maketrainset_SOURCES = shout_maketrainset.cpp shout_maketrainset_main.cpp
shout_LDFLAGS = $(all_libraries)
shout_SOURCES = standard.h whisper.cpp whisper.h shout_maketrainset.cpp \
		shout_maketrainset.h adapt_am_treenode.cpp adapt_am_treenode.h segmenter.cpp segmenter.h \
	articulatorystream.cpp

shout_adapt_am_LDFLAGS = $(all_libraries)
shout_adapt_am_SOURCES = adapt_am.cpp adapt_am_main.cpp adapt_am_treenode.cpp \
	languagemodel_segmenter.cpp languagemodel_segmenter.h segmenter.cpp segmenter.h standard.h \
	train_segmenter.cpp train_segmenter.h

shout_prepare_adapt_LDFLAGS = $(all_libraries)
shout_prepare_adapt_SOURCES = adapt_am_treenode.cpp adapt_am_treenode.h debug.h standard.h shoutprepareadapt.cpp
shout_cluster_LDFLAGS = $(all_libraries)
shout_cluster_SOURCES = standard.h shout_cluster.cpp adapt_am_treenode.cpp \
	adapt_am_treenode.h adapt_segmenter.cpp adapt_segmenter.h segmenter.cpp segmenter.h \
	train_segmenter.cpp train_segmenter.h languagemodel_segmenter.cpp languagemodel_segmenter.h

lib_LIBRARIES = libshout_basics.a
libshout_basics_a_SOURCES = standard.h gaussian.cc gaussian.h languagemodel.cpp 	languagemodel.h lexicaltree.cpp lexicaltree.h mixgaussian.cc mixgaussian.h 	phonemodel.cpp phonemodel.h vector.cc vector.h hash.cpp hash.h phonefilereader.cpp 	featurepool.cpp featureextraction.cpp featureextraction.h FFTReal.cpp FFTReal.h 	multimixgaussian.cpp shout_misc.cpp shout-misc.h shoutconfig.cpp shoutconfig.h 	stringlookup.cpp trainphonemodel.cpp trainphonemodel.h
shout_cluster_LDADD = $(top_builddir)/src/libshout_basics.a
shout_prepare_adapt_LDADD = $(top_builddir)/src/libshout_basics.a
shout_adapt_am_LDADD = $(top_builddir)/src/libshout_basics.a
shout_LDADD = $(top_builddir)/src/libshout_basics.a
shout_lm2bin_LDADD = $(top_builddir)/src/libshout_basics.a
shout_dct2lextree_LDADD = $(top_builddir)/src/libshout_basics.a
shout_maketrainset_LDADD = $(top_builddir)/src/libshout_basics.a
shout_merge_am_SOURCES = shoutmergeam.cpp
shout_merge_am_LDADD = $(top_builddir)/src/libshout_basics.a
shout_update_version_LDADD = $(top_builddir)/src/libshout_basics.a
shout_update_version_SOURCES = standard.h shout_updateversion.cpp
shout_segment_LDADD = $(top_builddir)/src/libshout_basics.a
shout_segment_SOURCES = shoutsegment.cpp shoutsegment.h segmenter.cpp segmenter.h
shout_normalize_am_SOURCES = normalizeam.cpp
shout_normalize_am_LDADD = $(top_builddir)/src/libshout_basics.a
shout_vtln_LDADD = $(top_builddir)/src/libshout_basics.a
shout_vtln_SOURCES = shout_vtln.cpp shout_vtln_main.cpp standard.h
shout_train_model_LDADD = $(top_builddir)/src/libshout_basics.a
shout_train_model_SOURCES = shouttrainmodel.cpp
shout_train_finish_SOURCES = shouttrainfinish.cpp
shout_train_finish_LDADD = $(top_builddir)/src/libshout_basics.a
shout_merge_trainset_LDADD = $(top_builddir)/src/libshout_basics.a
shout_merge_trainset_SOURCES = mergetrainset.cpp shout_maketrainset.cpp \
	shout_maketrainset.h

shout_train_finish_sat_SOURCES = shouttrainfinishsat.cpp
shout_train_finish_sat_LDADD = $(top_builddir)/src/libshout_basics.a
shout_online_SOURCES = shout_vtln.cpp shoutonline.cpp
shout_online_LDADD = $(top_builddir)/src/libshout_basics.a
shout_train_mmi_LDADD = $(top_builddir)/src/libshout_basics.a
shout_train_mmi_SOURCES = shouttrainmmi.cpp
shout_spkrec_LDADD = $(top_builddir)/src/libshout_basics.a
shout_spkrec_SOURCES = speakerrecognition.cpp
shout_preprocess_SOURCES = shout_preprocess.cpp shout_preprocess.h
shout_preprocess_LDADD = $(top_builddir)/src/libshout_basics.a
shout_spkrec_stats_LDADD = $(top_builddir)/src/libshout_basics.a
shout_spkrec_stats_SOURCES = spkrecstats.cpp spkrecstats.h
shout_avgEnergy_LDADD = $(top_builddir)/src/libshout_basics.a
shout_avgEnergy_SOURCES = avgenergy.cpp avgenergy.h
all: all-am

.SUFFIXES:
.SUFFIXES: .cc .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(MKDIR_P) '$(DESTDIR)$(libdir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(libdir)" || exit 1; \
	  echo " $(INSTALL_DATA) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(INSTALL_DATA) $$list2 "$(DESTDIR)$(libdir)" || exit $$?; }
	@$(POST_INSTALL)
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  if test -f $$p; then \
	    $(am__strip_dir) \
	    echo " ( cd '$(DESTDIR)$(libdir)' && $(RANLIB) $$f )"; \
	    ( cd "$(DESTDIR)$(libdir)" && $(RANLIB) $$f ) || exit $$?; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(libdir)'; $(am__uninstall_files_from_dir)

clean-libLIBRARIES:
	-test -z "$(lib_LIBRARIES)" || rm -f $(lib_LIBRARIES)

libshout_basics.a: $(libshout_basics_a_OBJECTS) $(libshout_basics_a_DEPENDENCIES) $(EXTRA_libshout_basics_a_DEPENDENCIES) 
	$(AM_V_at)-rm -f libshout_basics.a
	$(AM_V_AR)$(libshout_basics_a_AR) libshout_basics.a $(libshout_basics_a_OBJECTS) $(libshout_basics_a_LIBADD)
	$(AM_V_at)$(RANLIB) libshout_basics.a
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

shout$(EXEEXT): $(shout_OBJECTS) $(shout_DEPENDENCIES) $(EXTRA_shout_DEPENDENCIES) 
	@rm -f shout$(EXEEXT)
	$(AM_V_CXXLD)$(shout_LINK) $(shout_OBJECTS) $(shout_LDADD) $(LIBS)

shout_adapt_am$(EXEEXT): $(shout_adapt_am_OBJECTS) $(shout_adapt_am_DEPENDENCIES) $(EXTRA_shout_adapt_am_DEPENDENCIES) 
	@rm -f shout_adapt_am$(EXEEXT)
	$(AM_V_CXXLD)$(shout_adapt_am_LINK) $(shout_adapt_am_OBJECTS) $(shout_adapt_am_LDADD) $(LIBS)

shout_avgEnergy$(EXEEXT): $(shout_avgEnergy_OBJECTS) $(shout_avgEnergy_DEPENDENCIES) $(EXTRA_shout_avgEnergy_DEPENDENCIES) 
	@rm -f shout_avgEnergy$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_avgEnergy_OBJECTS) $(shout_avgEnergy_LDADD) $(LIBS)

shout_cluster$(EXEEXT): $(shout_cluster_OBJECTS) $(shout_cluster_DEPENDENCIES) $(EXTRA_shout_cluster_DEPENDENCIES) 
	@rm -f shout_cluster$(EXEEXT)
	$(AM_V_CXXLD)$(shout_cluster_LINK) $(shout_cluster_OBJECTS) $(shout_cluster_LDADD) $(LIBS)

shout_dct2lextree$(EXEEXT): $(shout_dct2lextree_OBJECTS) $(shout_dct2lextree_DEPENDENCIES) $(EXTRA_shout_dct2lextree_DEPENDENCIES) 
	@rm -f shout_dct2lextree$(EXEEXT)
	$(AM_V_CXXLD)$(shout_dct2lextree_LINK) $(shout_dct2lextree_OBJECTS) $(shout_dct2lextree_LDADD) $(LIBS)

shout_lm2bin$(EXEEXT): $(shout_lm2bin_OBJECTS) $(shout_lm2bin_DEPENDENCIES) $(EXTRA_shout_lm2bin_DEPENDENCIES) 
	@rm -f shout_lm2bin$(EXEEXT)
	$(AM_V_CXXLD)$(shout_lm2bin_LINK) $(shout_lm2bin_OBJECTS) $(shout_lm2bin_LDADD) $(LIBS)

shout_maketrainset$(EXEEXT): $(shout_maketrainset_OBJECTS) $(shout_maketrainset_DEPENDENCIES) $(EXTRA_shout_maketrainset_DEPENDENCIES) 
	@rm -f shout_maketrainset$(EXEEXT)
	$(AM_V_CXXLD)$(shout_maketrainset_LINK) $(shout_maketrainset_OBJECTS) $(shout_maketrainset_LDADD) $(LIBS)

shout_merge_am$(EXEEXT): $(shout_merge_am_OBJECTS) $(shout_merge_am_DEPENDENCIES) $(EXTRA_shout_merge_am_DEPENDENCIES) 
	@rm -f shout_merge_am$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_merge_am_OBJECTS) $(shout_merge_am_LDADD) $(LIBS)

shout_merge_trainset$(EXEEXT): $(shout_merge_trainset_OBJECTS) $(shout_merge_trainset_DEPENDENCIES) $(EXTRA_shout_merge_trainset_DEPENDENCIES) 
	@rm -f shout_merge_trainset$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_merge_trainset_OBJECTS) $(shout_merge_trainset_LDADD) $(LIBS)

shout_normalize_am$(EXEEXT): $(shout_normalize_am_OBJECTS) $(shout_normalize_am_DEPENDENCIES) $(EXTRA_shout_normalize_am_DEPENDENCIES) 
	@rm -f shout_normalize_am$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_normalize_am_OBJECTS) $(shout_normalize_am_LDADD) $(LIBS)

shout_online$(EXEEXT): $(shout_online_OBJECTS) $(shout_online_DEPENDENCIES) $(EXTRA_shout_online_DEPENDENCIES) 
	@rm -f shout_online$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_online_OBJECTS) $(shout_online_LDADD) $(LIBS)

shout_prepare_adapt$(EXEEXT): $(shout_prepare_adapt_OBJECTS) $(shout_prepare_adapt_DEPENDENCIES) $(EXTRA_shout_prepare_adapt_DEPENDENCIES) 
	@rm -f shout_prepare_adapt$(EXEEXT)
	$(AM_V_CXXLD)$(shout_prepare_adapt_LINK) $(shout_prepare_adapt_OBJECTS) $(shout_prepare_adapt_LDADD) $(LIBS)

shout_preprocess$(EXEEXT): $(shout_preprocess_OBJECTS) $(shout_preprocess_DEPENDENCIES) $(EXTRA_shout_preprocess_DEPENDENCIES) 
	@rm -f shout_preprocess$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_preprocess_OBJECTS) $(shout_preprocess_LDADD) $(LIBS)

shout_segment$(EXEEXT): $(shout_segment_OBJECTS) $(shout_segment_DEPENDENCIES) $(EXTRA_shout_segment_DEPENDENCIES) 
	@rm -f shout_segment$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_segment_OBJECTS) $(shout_segment_LDADD) $(LIBS)

shout_spkrec$(EXEEXT): $(shout_spkrec_OBJECTS) $(shout_spkrec_DEPENDENCIES) $(EXTRA_shout_spkrec_DEPENDENCIES) 
	@rm -f shout_spkrec$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_spkrec_OBJECTS) $(shout_spkrec_LDADD) $(LIBS)

shout_spkrec_stats$(EXEEXT): $(shout_spkrec_stats_OBJECTS) $(shout_spkrec_stats_DEPENDENCIES) $(EXTRA_shout_spkrec_stats_DEPENDENCIES) 
	@rm -f shout_spkrec_stats$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_spkrec_stats_OBJECTS) $(shout_spkrec_stats_LDADD) $(LIBS)

shout_train_finish$(EXEEXT): $(shout_train_finish_OBJECTS) $(shout_train_finish_DEPENDENCIES) $(EXTRA_shout_train_finish_DEPENDENCIES) 
	@rm -f shout_train_finish$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_train_finish_OBJECTS) $(shout_train_finish_LDADD) $(LIBS)

shout_train_finish_sat$(EXEEXT): $(shout_train_finish_sat_OBJECTS) $(shout_train_finish_sat_DEPENDENCIES) $(EXTRA_shout_train_finish_sat_DEPENDENCIES) 
	@rm -f shout_train_finish_sat$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_train_finish_sat_OBJECTS) $(shout_train_finish_sat_LDADD) $(LIBS)

shout_train_mmi$(EXEEXT): $(shout_train_mmi_OBJECTS) $(shout_train_mmi_DEPENDENCIES) $(EXTRA_shout_train_mmi_DEPENDENCIES) 
	@rm -f shout_train_mmi$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_train_mmi_OBJECTS) $(shout_train_mmi_LDADD) $(LIBS)

shout_train_model$(EXEEXT): $(shout_train_model_OBJECTS) $(shout_train_model_DEPENDENCIES) $(EXTRA_shout_train_model_DEPENDENCIES) 
	@rm -f shout_train_model$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_train_model_OBJECTS) $(shout_train_model_LDADD) $(LIBS)

shout_update_version$(EXEEXT): $(shout_update_version_OBJECTS) $(shout_update_version_DEPENDENCIES) $(EXTRA_shout_update_version_DEPENDENCIES) 
	@rm -f shout_update_version$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_update_version_OBJECTS) $(shout_update_version_LDADD) $(LIBS)

shout_vtln$(EXEEXT): $(shout_vtln_OBJECTS) $(shout_vtln_DEPENDENCIES) $(EXTRA_shout_vtln_DEPENDENCIES) 
	@rm -f shout_vtln$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shout_vtln_OBJECTS) $(shout_vtln_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/FFTReal.Po
include ./$(DEPDIR)/adapt_am.Po
include ./$(DEPDIR)/adapt_am_main.Po
include ./$(DEPDIR)/adapt_am_treenode.Po
include ./$(DEPDIR)/adapt_segmenter.Po
include ./$(DEPDIR)/articulatorystream.Po
include ./$(DEPDIR)/avgenergy.Po
include ./$(DEPDIR)/featureextraction.Po
include ./$(DEPDIR)/featurepool.Po
include ./$(DEPDIR)/gaussian.Po
include ./$(DEPDIR)/hash.Po
include ./$(DEPDIR)/languagemodel.Po
include ./$(DEPDIR)/languagemodel_segmenter.Po
include ./$(DEPDIR)/lexicaltree.Po
include ./$(DEPDIR)/memmappedfile.Po
include ./$(DEPDIR)/mergetrainset.Po
include ./$(DEPDIR)/mixgaussian.Po
include ./$(DEPDIR)/multimixgaussian.Po
include ./$(DEPDIR)/normalizeam.Po
include ./$(DEPDIR)/phonefilereader.Po
include ./$(DEPDIR)/phonemodel.Po
include ./$(DEPDIR)/segmenter.Po
include ./$(DEPDIR)/shout_cluster.Po
include ./$(DEPDIR)/shout_dct2lextree.Po
include ./$(DEPDIR)/shout_lm2bin.Po
include ./$(DEPDIR)/shout_maketrainset.Po
include ./$(DEPDIR)/shout_maketrainset_main.Po
include ./$(DEPDIR)/shout_misc.Po
include ./$(DEPDIR)/shout_preprocess.Po
include ./$(DEPDIR)/shout_updateversion.Po
include ./$(DEPDIR)/shout_vtln.Po
include ./$(DEPDIR)/shout_vtln_main.Po
include ./$(DEPDIR)/shoutconfig.Po
include ./$(DEPDIR)/shoutmergeam.Po
include ./$(DEPDIR)/shoutonline.Po
include ./$(DEPDIR)/shoutprepareadapt.Po
include ./$(DEPDIR)/shoutsegment.Po
include ./$(DEPDIR)/shouttrainfinish.Po
include ./$(DEPDIR)/shouttrainfinishsat.Po
include ./$(DEPDIR)/shouttrainmmi.Po
include ./$(DEPDIR)/shouttrainmodel.Po
include ./$(DEPDIR)/speakerrecognition.Po
include ./$(DEPDIR)/spkrecstats.Po
include ./$(DEPDIR)/stringlookup.Po
include ./$(DEPDIR)/train_segmenter.Po
include ./$(DEPDIR)/trainhash.Po
include ./$(DEPDIR)/trainphonemodel.Po
include ./$(DEPDIR)/vector.Po
include ./$(DEPDIR)/whisper.Po

.cc.o:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.o:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(PROGRAMS) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libLIBRARIES \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS install-libLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-libLIBRARIES

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic clean-libLIBRARIES \
	cscopelist-am ctags ctags-am distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-libLIBRARIES install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags tags-am uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-libLIBRARIES


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
